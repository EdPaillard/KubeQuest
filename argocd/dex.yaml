---
apiVersion: v1
kind: Namespace
metadata:
  name: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      volumes:
        - name: config
          configMap:
            name: dex
            items:
              - key: config.yaml
                path: config.yaml
        - name: tls
          secret:
            secretName: dex-tls
        # - name: ssl
        #   secret:
        #     secretName: dex-tls
        #     items:
        #       - key: tls.crt
        #         path: tls.crt
        # - name: ssl
        #   secret:
        #     secretName: dex-tls
        #     items:
        #       - key: tls.key
        #         path: tls.key
        #     path: /var/lib/rancher/k3s/server/tls/server-ca.crt
        #     type: File
        # - name: tls-key
        #   hostPath:
        #     path: /var/lib/rancher/k3s/server/tls/server-ca.key
        #     type: File
      serviceAccountName: dex # This is created below
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      containers:
        - image: ghcr.io/dexidp/dex:v2.32.0
          name: dex
          command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

          ports:
          - name: https
            containerPort: 5556

          volumeMounts:
          - name: config
            mountPath: /etc/dex/cfg/config.yaml
            subPath: config.yaml
          - name: tls
            readOnly: true
            mountPath: /etc/dex/tls
          # - name: ssl
          #   readOnly: true
          #   mountPath: /etc/dex/tls.key
          
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5556
              scheme: HTTPS

          env:
          - name: GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: github-client
                key: client-id
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: github-client
                key: client-secret
          - name: STATIC_HASH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: github-client
                key: static-hash-password
          - name: STATIC_SECRET
            valueFrom:
              secretKeyRef:
                name: github-client
                key: static-secret
          - name: KUBERNETES_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://dex.k3s.lifoto.co:32000
    logger:
      level: "debug"
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    oauth2:
      responseTypes: ["code", "token", "id_token"]
      skipApprovalScreen: true

    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.k3s.lifoto.co:32000/callback
        orgs:
          - name: kubequest-lil

    enablePasswordDB: true
    staticPasswords:
    - email: "ed.paillard@gmail.com"
      # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
      hash: $2y$10$OhTOIO8z6qKqbDQoduLoZeMbiPXbT1HwIWfCau9fv.kLRwENPB1Ea
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"

    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]

    staticClients:
    - id: dex-k8s-authenticator
      redirectURIs:
      - https://login.k3s.lifoto.co/callback
      name: 'KubequestApp'
      secret: $STATIC_SECRET
    
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000
  selector:
    app: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex           # Service account assigned to the dex pod, created above
  namespace: dex  # The namespace dex is running in
---
# apiVersion: traefik.io/v1alpha1
# kind: IngressRoute
# metadata:
#   name: dex-ingressroute
#   namespace: dex
#   annotations:
#     kubernetes.io/tls-acme: "true"
# spec:
#   entryPoints:
#     - websecure
#   routes:
#   - match: Host(`dex.k3s.lifoto.co`)
#     kind: Rule
#     services:
#     - name: dex
#       port: 5556
#       scheme: https
#   tls:
#     secretName: dex-tls


# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: dex-ingress
#   namespace: dex
# spec:
#   ingressClassName: traefik
#   tls:
#     - hosts:
#       - dex.k3s.lifoto.co
#       secretName: dex-tls
#   rules:
#     - host: dex.k3s.lifoto.co
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: dex
#                 port:
#                   number: 5556
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: dex-tls
  namespace: dex
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: dex-tls
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .tlscrt | pkcs12cert }}"
        tls.key: "{{ .tlskey | pkcs12key }}"
        ca.crt: "{{ .cacert | pkcs12cert }}"
  data:
    - secretKey: tlscrt
      remoteRef:
        key: dex
        property: cert
    - secretKey: tlskey
      remoteRef:
        key: dex
        property: key
    - secretKey: cacert
      remoteRef:
        key: dex
        property: cacert
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-client
  namespace: dex
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: github-client
  data:
    - secretKey: client-id
      remoteRef:
        key: github
        property: client_id
    - secretKey: client-secret
      remoteRef:
        key: github
        property: client_secret
    - secretKey: static-hash-password
      remoteRef:
        key: github
        property: static_hash_password
    - secretKey: static-secret
      remoteRef:
        key: github
        property: static_secret


# apiVersion: v1
# data:
#   client-id: MjJiMDliNmI0ODI4YWNhNWEyMjc=
#   client-secret: NzU1MDczNzlkYjQ3NjUzM2I0ZGU3ZGU4NjlhNzIyYWNkY2FhMGJhMw==
#   static_hash_password:
#   static_secret:
# kind: Secret
# metadata:
#   name: github-client
#   namespace: dex
# ---
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: cert-auth-dex
#   namespace: dex
# spec:
#   secretName: dex-tls
#   dnsNames:
#     - dex.k3s.lifoto.co
#   issuerRef:
#     name: letsencrypt-kubequest
#     kind: ClusterIssuer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex-cluster-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: Group
    name: kubequest-lil:kubernetes-admins
    apiGroup: rbac.authorization.k8s.io