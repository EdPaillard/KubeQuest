---
apiVersion: v1
kind: Namespace
metadata:
  name: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      volumes:
        - name: config
          configMap:
            name: dex
            items:
              - key: config.yaml
                path: config.yaml
        - name: tls
          secret:
            secretName: dex-tls
        # - name: ssl
        #   secret:
        #     secretName: dex-tls
        #     items:
        #       - key: tls.crt
        #         path: tls.crt
        # - name: ssl
        #   secret:
        #     secretName: dex-tls
        #     items:
        #       - key: tls.key
        #         path: tls.key
        #     path: /var/lib/rancher/k3s/server/tls/server-ca.crt
        #     type: File
        # - name: tls-key
        #   hostPath:
        #     path: /var/lib/rancher/k3s/server/tls/server-ca.key
        #     type: File
      serviceAccountName: dex # This is created below
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      containers:
        - image: ghcr.io/dexidp/dex:v2.32.0
          name: dex
          command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

          ports:
          - name: https
            containerPort: 5556

          volumeMounts:
          - name: config
            mountPath: /etc/dex/cfg/config.yaml
            subPath: config.yaml
          - name: tls
            readOnly: true
            mountPath: /etc/dex/tls
          # - name: ssl
          #   readOnly: true
          #   mountPath: /etc/dex/tls.key
          
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5556
              scheme: HTTPS

          env:
          - name: GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: github-client
                key: client-id
          - name: GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: github-client
                key: client-secret
          - name: STATIC_HASH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: github-client
                key: static-hash-password
          - name: STATIC_SECRET
            valueFrom:
              secretKeyRef:
                name: github-client
                key: static-secret
          - name: KUBERNETES_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://dex.k3s.lifoto.co:32000
    logger:
      level: "debug"
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    oauth2:
      responseTypes: ["code", "token", "id_token"]
      skipApprovalScreen: true

    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.k3s.lifoto.co:32000/callback
        orgs:
          - name: kubequest-lil

    enablePasswordDB: true
    staticPasswords:
    - email: "ed.paillard@gmail.com"
      # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
      hash: $2y$10$OhTOIO8z6qKqbDQoduLoZeMbiPXbT1HwIWfCau9fv.kLRwENPB1Ea
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"

    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]

    staticClients:
    - id: dex-k8s-authenticator
      redirectURIs:
      - https://login.k3s.lifoto.co/callback
      name: 'KubequestApp'
      secret: $STATIC_SECRET
    
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000
  selector:
    app: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex           # Service account assigned to the dex pod, created above
  namespace: dex  # The namespace dex is running in
---
# apiVersion: traefik.io/v1alpha1
# kind: IngressRoute
# metadata:
#   name: dex-ingressroute
#   namespace: dex
#   annotations:
#     kubernetes.io/tls-acme: "true"
# spec:
#   entryPoints:
#     - websecure
#   routes:
#   - match: Host(`dex.k3s.lifoto.co`)
#     kind: Rule
#     services:
#     - name: dex
#       port: 5556
#       scheme: https
#   tls:
#     secretName: dex-tls


# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: dex-ingress
#   namespace: dex
# spec:
#   ingressClassName: traefik
#   tls:
#     - hosts:
#       - dex.k3s.lifoto.co
#       secretName: dex-tls
#   rules:
#     - host: dex.k3s.lifoto.co
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: dex
#                 port:
#                   number: 5556
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lVRFZOcFBYN3BYREtFb29Va29JRzBRYU5GeEVjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VqRVFNQTRHQTFVRUF3d0hhM1ZpWlMxallUQWVGdzB5TkRBMk1ETXhNakF4TWpOYUZ3MHlOREE0TURJeApNakF4TWpOYU1CSXhFREFPQmdOVkJBTU1CMnQxWW1VdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzU5cnkvelRpWG9oQ3FXcWhQWmFIdkNUZHA5ZkZWa0ZUek14VXJqdXUwWnRWWUc5aVYKNUIwaS9wWXFCT2xNRnJwK3BLQ0M4bE9tY2FURFA3Y2NRZGM3djVoaXdUZ2JMdnJhRlJObXNSWHBBZDQwbG15TQpNbTEvT09GSXk2TExSRlpYZ003Tjc0azNlS0RMdVNtVXNDcHhaSWlHcERQNCt0cVhtTXVJenlGcE9La2ROVXA1ClVieFI0V1NnWU5UNEN2L0oyaEwvc0c2a2ZaUXRua3RoN2ZHcTJrOWk2d2wzb3lwdUZCM214Rm5JVGNZRkkyK3cKR0dOaWZMblRzVkpNNXJJMXZPcmxRYTlKRVlKdCtFUnZVTGo5TXZwdjViRlhkb0x0VVB4S0s3SlcvNUI4OHhVRgorc2orQk5EcGFBdWZJRzVvQ1BEVi8wZkEwSEhnanBsWkRJVXBBZ01CQUFHamVEQjJNQWtHQTFVZEV3UUNNQUF3CkN3WURWUjBQQkFRREFnWGdNQndHQTFVZEVRUVZNQk9DRVdSbGVDNXJNM011YkdsbWIzUnZMbU52TUIwR0ExVWQKRGdRV0JCUnNReXc5UDU0T1BqdWRIK0V6Rm9qL2lPNlNUekFmQmdOVkhTTUVHREFXZ0JRMzZKOUtrUEkyYnZYSwp0dUVxTkVKckdhcWg2REFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBYVMrQjIzSlY5ZVVhYjJNNFdxdGVTdGpHCng4ZWdYSG1ZemlUU3FMTVJHbkFDQlZsZHdvUnpsWHZXVnpxNG9qVjhwQitkYXk3K1hTbVRRcVpGZEd6U1F2UW0KZjNLL1FNVkdGTFhaQTN1elFuOE51Uk1tZTh1VkNkaXQvbkFHSFM2ZnZtblFSQmM2OFA2MGh4NHlCc2FITzRpNgpKS0pveWdFS2x3WHR0SzdqMHhqNVArZFNNTmRXU1A5TVlmWG85aGlISm9HcFNsU3drQ3VDUzJtVlBuNWpqTGJiCjNJS3MwOEI0WWRucnkzT1NOWTZrS2R1WkxPdkgyZCt3eVViMFFqK1Q4NUE4dGU1NTNQZTI3dUpZU2ZoRVRuZnAKMmpPcy8wVFRaOXdZaWFiRUJsa1NYOW8vWUZuc1U4b21ycml6Q09zdTU5RlJZNUVIczhVMDUvVzliZTJPUEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== # LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lVVERqSFU5eCtiK1BEMWVSQWoySVlOSkl4WWg4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VqRVFNQTRHQTFVRUF3d0hhM1ZpWlMxallUQWVGdzB5TkRBek1qQXlNREl6TlRsYUZ3MHlOREF6TXpBeQpNREl6TlRsYU1CSXhFREFPQmdOVkJBTU1CMnQxWW1VdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREIvUDJ2TXpqQXE1RmlnR3VVclRKRXZxcmE3RndkK0QzMTdYSFFjbGcvWERCSnNCWkEKRS96SFl0a003K0NMRXZRSWZiRW1qNGpoM3hWNWY2b1FHVldhbDFZdVdsN3A4ZFBGQUpTUWVIcmdvQnp3TTd2UAoxWnRDNTZHeWNRYXhZWE9ldnZ0VjJMSUVlcHZtK2drVHNSYnZzdktkUE1OSWVOazdiTkxESlZ2Uit6RHhTQ1d3CmtqMG0rWUt1c0NyaFR4MGRFajVlYlpsVGpVZU5YUEtNSnNIM2J1ak1oWGhvd29jME5iSG5QRTRhOXhhR3d5WGQKZzJxb3U2TXEzdkRqd0Mvc0c4cFVFOFFIVVI5WDJsWVpUS1FSOEFhWlMrWVdXcjl6MFRXeGxaaVVnWFRHdUlUNApsRUNBYnJEekRxWjFaQnNRRHE5d2taQXUyNU14aVRFTU5nRkJBZ01CQUFHamVEQjJNQWtHQTFVZEV3UUNNQUF3CkN3WURWUjBQQkFRREFnWGdNQndHQTFVZEVRUVZNQk9DRVdSbGVDNXJNM011YkdsbWIzUnZMbU52TUIwR0ExVWQKRGdRV0JCUy9oVGpkVGU5SHluNTdtRDVjQVFFOXV1a3dIREFmQmdOVkhTTUVHREFXZ0JRWGlwQUNTTFlLOWRUVQplMm45dmlqai9YbENjekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRmJPR0hITk5pd2s0eUl6cjZnWmRFQVA4CjlRb1U5eHQvOTRNZVlETHFPUWprY0lUTHNScGdaRVpPNUZKT21oeDBpQ003VmhBM3hCYW5xR0pib0orOHNuOUkKQTh2emN0S0JVVHpIL3gzNzN4SVRZQVA4S0FTRUNKVklqWXFtN2s4d0ltZDRROEVMeTZCQllMellGc3lYSGlydwpUc0g0VFNBVjJSVUphcjB0Y2hYdTN5dGM5a3UyUm5EQThrTmhqeUR2ZmsxRk9ZK2hzejR4L1NLMHp4RlVZNDlrCmVBdUhoQjQ0aFQ5Kzl2c1lrWnR1NGxySDRSNVhqSGV6ODAyN2pDbWNTbGtqSUVwUWl1bVcxRFQra29jNi9aRDYKbGZyQU8xeGFKSnpMZzIyNVpZeG9QNTB1L0xkMDFza1lPOC85ZzhCaWxLc1YvZXBtazd3TVZwUGJ2eGltRlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQzU5cnkvelRpWG9oQ3EKV3FoUFphSHZDVGRwOWZGVmtGVHpNeFVyanV1MFp0VllHOWlWNUIwaS9wWXFCT2xNRnJwK3BLQ0M4bE9tY2FURApQN2NjUWRjN3Y1aGl3VGdiTHZyYUZSTm1zUlhwQWQ0MGxteU1NbTEvT09GSXk2TExSRlpYZ003Tjc0azNlS0RMCnVTbVVzQ3B4WklpR3BEUDQrdHFYbU11SXp5RnBPS2tkTlVwNVVieFI0V1NnWU5UNEN2L0oyaEwvc0c2a2ZaUXQKbmt0aDdmR3EyazlpNndsM295cHVGQjNteEZuSVRjWUZJMit3R0dOaWZMblRzVkpNNXJJMXZPcmxRYTlKRVlKdAorRVJ2VUxqOU12cHY1YkZYZG9MdFVQeEtLN0pXLzVCODh4VUYrc2orQk5EcGFBdWZJRzVvQ1BEVi8wZkEwSEhnCmpwbFpESVVwQWdNQkFBRUNnZ0VBRVVoeFZnRm5MZVNGMkZIdzl1Rm9YRFJjUGp0TzBNSnlFQXVOS2ZnRm5QQmwKQ2VRYlRDR2dEdkFLbWJZaUkrR3dOeDZWWjdESTB4MFlaZE1HbkJneHZqVDZIeUltVk9uQ3JrRUEyc0xyZzkvRQp2SU54d1gwd1Rhb2JlZTMvQ21yUlVYUkFXWEJXZ3QxeHFFSzVycjdKVUZ6bERyVUtaWUhwamViejhrVGtnekwwClB5R0ZaZWYvM0x4OHJ6aEVUWk1ZU09mcEh1YlBzNGM0MmJuODBEaXgwdU1HQWtDU1hoU0NkTTBMV3g1R3RzTDYKUXdhRUF1aFVIc2hLN2xrMC9YbURYOXJuNnFkdk8vdHR5am9yZENMYTZ5T0lNOVJBK1d6ZHV5YWpaazg4bzJYUwpaSkRVUDJqOEppZzFRM0Q4eitOSmcrTE1oVitSakNnSlBPRngyaGdsOXdLQmdRREROSmNNNEN4eXJna2RRbmlTCmYrUDNuVHJzNVFCa0lzZ3d3K0kwU0dhazNTUUovVWdFd21KTVU0Y0txSEpWdTlUR1JSNHNTc09ncFNlckxQaEsKSVo4RUNTeWVkMTVKbHZMc3lDTyszYUJ6L0loWWNFVk92cWV0b0FpVnorREVNUEhOYXJ0QVk1SXRmS2hzNWhpaAowSnpUSDBycmZHeGl6VE1UamJqRkRwWTZBd0tCZ1FEejRWUWdOdzBTNmQrdnU4cUpST2hncDd3RC9aQS9iRE1BClRyeXRUcmUxeVBaRVIxUmFmK2h5dXlmMjZrWnNLQWVPM1FZYi9STVE2VklaWUlpRHZxY0JMUE4vOUxwYitldm4KejRNUStKS3J2VFc1bVBEdVBEeFp6VXF6N1lqRUlqV3I4Q3ZSV0pLTzZ4TERpT0VTcTBEaFkvcVFBODZiMjd6cQpyR3BUcVlxeVl3S0JnRWY2Q3p4SEtIeDhxWVd0YmRIdThEcnNNYjhKelhRZTB4d1FEa2RpN3Q0WllHR0NqOXlaClpDOXFtUitYN3RpbjhwUE5Cb3drWVMvSjFlK3JIRDRSV1pYZVlDSnFOMDBCS0wrZ0tIWUhPRk9zS1FZYkY2TXEKYjU5NG85SEJuY29abGY4OVBLQklWcTBKQ3Yxa2RtNnNBamRpa1hoMUgyM3E1Y3R1OVZOTHhwN0xBb0dBSlRzdwpFWjcxNHY1TFJOUEJic1ZUU0hZeThOVUQ4WHErS256YXR3WithMFVidTM2OE5QaXo3dGY5bU9kWkN1ZnRoM1RjCm11Yyt3dVVyd0c0SlNUdVEyVkFZZUY5UEYvMkdjeVF0MlNocGs4aFY3RmlaNTNUUXJkRDJaNU9Ldm82T2JRcEUKVmpoVVgzY3ByU28zV2hkRTEyUGcrNTFwTEVnV2hpaitMbm1Da0FzQ2dZQTkyZ2M4V29ra2srWjFMWU9ZSGkwNQpEajhlaFR0cnYweWJMY0JhTy83VnR3RXpjVENuMGdXaThqZVI0bGlZRFdya09SRm5sRXJrL29xWGY1bk4xeWpPCng4MW1kV1AzcTZiZFJseTZjV3VwaktHWEZSQVlDWThiWkxnUW0zb3AwQTlaTXpOWHdIR3dnbm1DTXJHMDkwUVoKM3FBdGhJbXBXREV3N0NpNzRQcTJEZz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K # LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRREIvUDJ2TXpqQXE1RmkKZ0d1VXJUSkV2cXJhN0Z3ZCtEMzE3WEhRY2xnL1hEQkpzQlpBRS96SFl0a003K0NMRXZRSWZiRW1qNGpoM3hWNQpmNm9RR1ZXYWwxWXVXbDdwOGRQRkFKU1FlSHJnb0J6d003dlAxWnRDNTZHeWNRYXhZWE9ldnZ0VjJMSUVlcHZtCitna1RzUmJ2c3ZLZFBNTkllTms3Yk5MREpWdlIrekR4U0NXd2tqMG0rWUt1c0NyaFR4MGRFajVlYlpsVGpVZU4KWFBLTUpzSDNidWpNaFhob3dvYzBOYkhuUEU0YTl4YUd3eVhkZzJxb3U2TXEzdkRqd0Mvc0c4cFVFOFFIVVI5WAoybFlaVEtRUjhBYVpTK1lXV3I5ejBUV3hsWmlVZ1hUR3VJVDRsRUNBYnJEekRxWjFaQnNRRHE5d2taQXUyNU14CmlURU1OZ0ZCQWdNQkFBRUNnZ0VBQnJhMjlab211UzJzUUVYNTNkdnBWUGdWQkFoUkh5MFR3VHFyWG8rajNwR0EKdWFsNytQekN4TE1obUVhSENzUFMvcVk4VVgxL094Mys2Vys4Z1laMjhDZVRzU2YvTXB2a0p6bkt2OU5Eb1c3agoxdFpiaGlrUGtMbTJpVzFLL05ieGF2UStKa0x6MVBRdlhYSkMzOVBEQmttM0J0cHZBY2VZOFJXN2w2Qm4zMHBXCjRDeVpWYlh4akRSd1F2WVRuVC9lMmlPWG5FODRYMUNXUUgrbXZSdkVmV2U3eTgvMEY5U3Bqak1qanA5OGw1ZE0Kc0MyN1hlY2VWak0zcmtMbk1ldkRjNTU5UFZ4eFhMWWdVeWlURVA0bE1uc01YVDZ1OEU1dGdSMTRmbXlTdTVwKwpUcVZtdUlEaCtjR3BZTHVJVkxTUEJGUURLNmFUWGpUVFNNcFRENFF3U1FLQmdRRCtiL2ZtM0wxK1dkOEpVbmVUCjUzeERLZndXWHMxRmhJaG0xNE5WaFN6aXozb1EwNGRMazA4NzZVT2ZqWExWYXplYmVPQk53aFB2d0lNSkF0SGIKcUMxbHlsNWFZQjlxQzZjdENiNkhnN1NLUlRpQ2NKTnZ1eXRoU1p4R2NVL3p3MmN1NjNOTzc0R3ExaGhPR0Y0MQoveGFYTFIxVlMvNklxVWhaU0ZiUkNHL0p4UUtCZ1FERExmdTFHR3dsTmZVN1hzZGdTdm55dVFFVUZyVXY2Y1hrCkI3N2Y5eUxzMlpCeDZ0WnJUNWw1Z2lKWmU4WVBwODJZV0haV001SmR6dHVPcFg0a2VJSFdHK0NxNTZ0SWFqZkgKS0hEKzY5WittQk1XV0RIQkdBSEZ0d3hUOVdwSjlVbldYY2JrRVVnSGZveHZITG5wdGRjY3FmK1N6V0JCbEJ6eApkTmFFd0g4ZFRRS0JnUURsUktPUFJhMENvNXpVVzVrZ2oyQnJiUE9ZZk1oZk1mTnZLQmRTQW5UVjA3cmNXcDc1ClBMNFM4RGhkRnlvNG9TbzBVQkZlUDltVEdsZDQwUytrek1CTGpyVENud2J2bVp5RWV0bFNaeDFSMHRuK3Y4NDYKeWQ5bkJOdHFwa1F6RlFwdlB2NWlUSEw5SzNvdk5Nbi93ZUhyUzEyNU5JY2hRZGpOaXQrZjhBZzdPUUtCZ0VtMAoyc0lueCtkQmVpdUNmazVaNGd3TVcyRG50bUt5cUgyVmd6cDJ6S1NmQUpKVWVjYXFsNjJ3UENLSXdHSDNINGZ4Cm1EYXpZUW0xN1dud0N6UGdvajlsNWJFRXJjVTUvM2hoU0ZLc1l5TUpjT1BXU0d2QUVpTkZIZzJ5dHdIWTlKcFUKYmFDQStpK0NWYXc4TCtVWE8zWGlxTllhWXNoQkU3RUhTMTkwaGt4ZEFvR0FjNTVBcFRwcVhaVVhCbGpsR2Zibwp5R2pYRWk1YU85bnErMXRlOUFaRnVINWRka2xEU2dwcFJYRUpPdjFHYUpDT3UzOXBpVklaS01IRnpDRlp2Vm1aCmh2YStZVlVzcVNMb3FwUlZYUisweWFUdDBoZVJWRXBkMWZ0a0pEM09QSGp2TWQrSEwvc1U5RFN0ZlJmd2FVdDQKVldpYVdzdkVYMjFma1VVaXYvNFd5QWs9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  # ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lVWXF4ODF2UUxPY1B1cW5zVFpuODZnVmEyU3Jjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VqRVFNQTRHQTFVRUF3d0hhM1ZpWlMxallUQWVGdzB5TkRBME1ESXdPRFV6TUROYUZ3MHlOREEyTURFdwpPRFV6TUROYU1CSXhFREFPQmdOVkJBTU1CMnQxWW1VdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFF5RDdiOUJBSDRwVW9WQ1ZkTGxsZ3dEU0JCaXcyUHh2d2dKVXlRL3pMOXRJdjdMZG4KeHZDSkM2WE8zaHpsdSt1N1Z2Y280Vjd3ekhSNG5vSzJRQmNSQ09Pc3lmbVhITmxGWWNncFdMTm5paU55bWtiTQpHUktUcVBDVVVlMDN2QUtWTTVrYXZEQXpsZmxCREwzUzI4bEVtb1lLY1VxOCtKQTA1RFQ4M3I1N2JNeE5oNW9FCjV1eXVRUmk1WlpWL1FVcGJpTGhlWTBvS1NxVUx4QkRWcnRkYVc0ZyswMzRjdW4vQWl2TW5MR3dNbUtUV2laVzgKaDlRazJ4VDA1M05WckVNeXluWXF4R2RmdTdHZ2I3TlJ4RnVaN2F4RzZhengwZE1MRzVqdDJ4SStIUXY3Sm55eAprVFRNMklYak1ESng5dXd5WjhiTHBWMzhpYU8wOVlyQVJmSG5BZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlQ1CnpTWEdEL3JmQ3NGK1J1SitDdGVJdVdqcWlUQWZCZ05WSFNNRUdEQVdnQlQ1elNYR0QvcmZDc0YrUnVKK0N0ZUkKdVdqcWlUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQzQwNXhROWJQKwpIdDdQS0lBRlU0Yk1LVE1TRXpHU2hnLzk5TkpHTzlQeFBTMjZBeG9oMno4TXJvdHJMTWZpNy9CTERGc1BBQ2FZCklvRng1L2dYYmJpMXZ4Z0lUV0thbjM4WEU5Uk94VElLVVAyM2d4WmNMOUczMVNWd3p0L2dFUHEySmc0eWR2UFoKYzdJWk9HaXZFSjNzRWtQWDlOTklBbER6SGdvWVk4WC9FdURtcHJacWVGVjhGWDJXS0dYbzJSRDRmRk4vb1BvRApNa3JBNkU3SHlhNm1sVjRwZ1FOeXg4MytIN0UxdEsvTlhNeTdoNnBZcC80MGJTL1ZXSHRsUXdYeWxoRmQ1dWVTClduUytXRjZ1SXpyT3MydURjMWdKKzVOT2ZqdFppTEpHWFN6bFhvaU92RUlSVDRsSzhKSzkxVXRDQ0pVbnBZOHAKKytWb1RldlYxbE1UCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
kind: Secret
metadata:
  name: dex-tls
  namespace: dex
type: kubernetes.io/tls
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-client
  namespace: dex
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: github-client
  data:
    - secretKey: client-id
      remoteRef:
        key: github
        property: client_id
    - secretKey: client-secret
      remoteRef:
        key: github
        property: client_secret
    - secretKey: static-hash-password
      remoteRef:
        key: github
        property: static_hash_password
    - secretKey: static-secret
      remoteRef:
        key: github
        property: static_secret


# apiVersion: v1
# data:
#   client-id: MjJiMDliNmI0ODI4YWNhNWEyMjc=
#   client-secret: NzU1MDczNzlkYjQ3NjUzM2I0ZGU3ZGU4NjlhNzIyYWNkY2FhMGJhMw==
#   static_hash_password:
#   static_secret:
# kind: Secret
# metadata:
#   name: github-client
#   namespace: dex
# ---
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: cert-auth-dex
#   namespace: dex
# spec:
#   secretName: dex-tls
#   dnsNames:
#     - dex.k3s.lifoto.co
#   issuerRef:
#     name: letsencrypt-kubequest
#     kind: ClusterIssuer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex-cluster-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: Group
    name: kubequest-lil:kubernetes-admins
    apiGroup: rbac.authorization.k8s.io